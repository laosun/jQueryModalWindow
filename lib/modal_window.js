/** ### LAO Milax Modal Window v1 (alpha) ###**/( function( $ ) {	/* #################################### */	var methods = {		// BODY 		$body		: false,		body		: {			lock		: function () { $( "body" ).css( "overflow", "hidden" ); },			unlock		: function () {	$( "body" ).css( "overflow", "" );		 }		},		/* ############################################################ */		/* ############################################################ */		// Элемент тени		$shadow		: false,		_shadow		: {				element	: "<div>",				css		: {					"zIndex"			: 99998,					"background-color" 	: "#000000",					"opacity" 			: 0.4,					"position"			: "fixed",					"left"				: 0,					"top"				: 0,					"text-align"		: "left",					"width"				: "100%",					"height"			: "100%"				},				attr	: {					"id"			: "jQmodal_win_shadow"				},				setup	: {					"opacityON"		: 0.7,					"opacityOFF"	: 0.1,					"speedON"		: 900,					"speedOFF"		: 900				},				animateON	: function () {},				animateOFF	: function () {}		},		/*  ##### Cоздание/отображение тени ##### */		shadow : function ( data ) {			var				from	= typeof( data['_shadow'] ) != "undefined" ? data['_shadow'] : "",				_shadow	= this.array_merge( from, this._shadow );			if ( !this.$shadow ) {					this.$shadow = $( _shadow.element )										.insertAfter( this.$container )										.data( "modal", _shadow )										.css(  _shadow.css  )										.attr( _shadow.attr )										.uniqueId();			}			this.shadow_close( data );			$.modal_winSetup.body.lock();			_shadow.animateON.call( $( this.$shadow ) );		},		// Основной контейнер под Элементы		$container	: false,		_container	: {				element	: "<div>",				css		: {					"top" 				: 0,					"left" 				: 0,					"zIndex"			: 100000,					"position"			: "fixed",					"overflow"			: "auto",					"width"				: "100%",					"height"			: "100%",					"text-align"		: "center",					"padding"			: "0"				},				attr	: {					"id"	: "jQmodal_win"				}		},		/* ############################################################ */		/* ############################################################ */		// Параметры модальных окон		$modals		: false,		_modal		: {				element		: "<div>",				content 	: "",				css			: {					"display"			: "none",					"position"			: "relative",					"zIndex"			: 999,					"width"				: "600px",					"text-align" 		: "left",					"margin" 			: "0 auto"				},				attr		: {},				setup		: {					"opacityON"		: 1,					"opacityOFF"	: 0.7,					"speedON"		: 0,					"speedOFF"		: 900				},				animateON	: function () {	},				animateOFF	: function () {}		},				/*  ##### Cоздание/отображение окон ##### */		modal	: function ( data ) {			var				from	= typeof( data['_modal'] ) != "undefined" ? data['_modal'] : "",				_modal	= this.array_merge( from, this._modal );						if ( typeof( _modal.attr['id'] ) != "string" || $( "#" + _modal.attr['id'] ).length <= 0 ) {				if ( typeof( this.$modals[ _modal.attr['id'] ] ) == "undefined" ) {					var $modal	= $( _modal.element )								.prependTo( this.$container )								.css(	_modal.css )								.attr(	_modal.attr )								//.html( '<div data-type=""></div>' )								.data( "modal", _modal )								.uniqueId()								.on ( "close", function(){																	$.modal_winSetup._modal_close.close.call( $(this) );																} );																					//$modal.children( "div[data-type]" ).html( _modal.content );					$modal.html( _modal.content );					this.modal_close( $modal, data );				} else {					var $modal	= $( this.$modals[_modal.attr['id']] ).prependTo( this.$container );				}			}			this.modal_on_top();		},				/* ############################################################ */		/* ############################################################ */		/* ########## ЗАКРЫТИЕ ########## */		/* ### ЗАКРЫТЬ ТЕНЬ (всё) ### */		_shadow_close	: {			element	: "<div>",			attr	: {				id		: "jQmodal_win_shadow_close"			},			content : "",			css		: {				"display" 		: "none"			},			close	: function ( event ) {				var					$shadow = $( $.modal_winSetup.$shadow ),					data	= $shadow.data( "modal" ),					Modal	= event.data;					$( this ).remove()					data.animateOFF.call( $shadow );					Modal.body.unlock();					Modal.$container.hide();					Modal._shadow_close.close_all.call( Modal );			},			close_all: function () {				var children	= this.$container.children();				for( var i = 0; i < children.length; i++ ) {					var						$child	= $( children[i] ),						id		= $child.attr("id");					if ( /ui-id-/.test( id ) ) {						$child.remove();					} else {						$.modal_winSetup.$modals[ id ]	= $child.detach();					}				}			}		},		shadow_close	: function ( data ) {			var				from			= typeof( data['_shadow_close'] ) != "undefined" ? data['_shadow_close'] : "",				_shadow_close	= this.array_merge( from, this._shadow_close );							if ( typeof _shadow_close.attr['id'] == "string" && $( "#" + _shadow_close.attr['id']).length >= 1 ) { return; }						$close	= $( _shadow_close.element )						.prependTo( this.$body )						.css(	_shadow_close.css )						.attr(	_shadow_close.attr )						.html(	_shadow_close.content )						.on( "click", this, _shadow_close.close );		},				/* ############################################################ */		/* ############################################################ */		/* ### ЗАКРЫТЬ ОКНО ### */		_modal_close	: {			element	: "<div>",			active	: false,			attr	: {				title	: "Close"			},			content : "xxx",			css		: {				"z-index"		: 99999,				"width"			: "20px",				"height"		: "20px",				"background"	: "magenta",				"float"			: "right",				"margin"		: "10px"			},			close	: function ( data ) {				var					id		= this.attr( "id" );					this.data( "modal" ).animateOFF.call( this );									if ( /ui-id-/.test( id ) ) {					this.remove();				} else {					$.modal_winSetup.$modals[ id ]	= this.detach();				}								if ( $.modal_winSetup.$container.children().length <= 0 ) {					$( "#" + $.modal_winSetup._shadow_close.attr.id ).trigger('click');					return;				}								$.modal_winSetup.modal_on_top();			}		},				modal_close		: function ( $modal, data ) {			var				from			= typeof( data['_modal_close'] ) != "undefined" ? data['_modal_close'] : "",				_modal_close	= this.array_merge( from, this._modal_close );			if ( !_modal_close.active ) { return };			$close	= $( _modal_close.element )						.prependTo( $modal )						.css(	_modal_close.css )						.attr(	_modal_close.attr )						.html(	_modal_close.content )						.on(	"click", function () { $modal.trigger("close"); } );		},				/* ############################################################ */		/* ############################################################ */		/* ########## Дополнительные методы ########## */		// Метод дополняет объект-массив `to` объект-массивом `from`		// и возвращает новый свормированных объект-массив		array_merge	: function ( from, to ) {				var newObj = {};				for ( var i in to ) {					newObj[ i ] = to[ i ];				}				for ( var i in from ) {					newObj[ i ] = typeof( from[ i ] ) == "object" ? this.array_merge( from[ i ], to[ i ] ) : from[ i ] ;				}				return newObj;		},				modal_on_top	: function ( ) {			var				children	= $.modal_winSetup.$container.children();			for ( var i = 0; i < children.length; i++ ) {				var $modal	= $( children[i] );				var data =  $modal.data( "modal" )				if ( i == 0 ) {					data.animateON.call( $modal );				} else {					data.animateOFF.call( $modal );				}			}		}	};		/* ############## ОСНОВНОЙ ВЫЗОВ (final) ############## */	var modal_win		= function ( data ) {		var	$modal	= $.modal_winSetup;			$modal.shadow.call( $modal, data );			$modal.modal.call( $modal, data );	};		/* ############## ПЕРЕДАТЧИК (final) ################ */	var modal_win_transfer = function () {			var				$body	= $("body"),				$modal	= $.modal_winSetup,				data	= $modal.modal_DRIVE( arguments[0] );		if ( $body.length <= 0 ) return false;		if ( $( "#jQmodal_win_shadow" ).length < 1 ) {			$modal.$body		= $body[0];			var _cont_	= $modal._container,				from	= typeof( data['_container'] ) != "undefined" ? data['_container'] : "",				_cont_	= $modal.array_merge( from, _cont_ );			$modal.$container	= $( _cont_.element ).css( _cont_.css ).attr( _cont_.attr ).prependTo( $body );		}		$modal.$container.show();		$modal.$container.modal_win( data );		}			/* ############## DRIVE ( by edit ) ############## */	 methods.modal_DRIVE	= function ( data ) {		// inset modal id		if ( typeof data['id'] != "undefined" ) {			if ( typeof data['_modal']		!= "object" )	data['_modal']			= {};			if ( typeof data._modal['attr'] != "object" )	data._modal['attr'] 	= {};			data._modal.attr['id'] = data['id'];		}		return data;	 }				/* #################################### */	$.modal_win			= modal_win_transfer;	$.fn.modal_win		= modal_win;		$.modal_winSetup	= methods;	if ( typeof $().uniqueId != "function" )  {		var uuid = 0;		$.fn.uniqueId	= function () {			return this.each(function() {				if ( !this.id ) {					this.id = "ui-id-" + (++uuid);				}			});		}	}	} )( jQuery );/* #################################################################### *//* ############		НАДСТРОЙКА 							   ############ *//* #################################################################### */( function( $ ) {	$.modal_winSetup.modal_DRIVE = function( data ) {		// Mini Drive		var setDataBlock	= function ( data, block ) {			for ( var i = 1; i < arguments.length; i++ ) {				var block = arguments[i];				if ( typeof block != "string" ) continue;				if ( typeof data[ block ] != "object" ) data[ block ] = {};			}			return data;		};		/* INSET TREE  */		data							= setDataBlock( data, "_modal", "_shadow", "_container", "_modal_close" );		data._modal						= setDataBlock( data._modal, "attr", "setup" );		data._modal.setup				= setDataBlock( data._modal.setup,	"callback" );		data._modal.setup.callback.on	= function(){ this.show(); };		data._modal.setup.callback.off	= function(){ this.hide(); };		data._modal.setup.callback.once	= function(){};		// INSET MODAL ID		if ( typeof data['id']			== "string" ) { data._modal.attr['id'] = data['id']; }// INSET MODAL ID		// INSET MODAL CONTENT		if ( typeof data['content']		== "string" ) { data._modal.content = data['content']; }		// INSET MODAL elementCSS		if ( typeof data['elementCSS']	== "object" ) { data._modal.css = data['elementCSS']; }		// INSET SHADOW shadowCSS		if ( typeof data['shadowCSS']	== "object" ) { data._shadow.css = data['shadowCSS']; }		// INSET CONTAINER containerCSS		if ( typeof data['containerCSS']== "object" ) { data._container.css = data['containerCSS']; }		// INSET CONTAINER containerCSS		if ( typeof data['modal_close'] == "boolean") { data._modal_close.active = data['modal_close']; }				/* INSET CALLBACK */		if ( typeof data['callback'] == "object" ) {			if ( typeof data.callback['on']		== "function" ) {				data._modal.setup.callback['on']	= data.callback['on'];			}			if ( typeof data.callback['off']	== "function" ) {				data._modal.setup.callback['off']	= data.callback['off'];			}			if ( typeof data.callback['once']	== "function" ) {				data._modal.setup.callback['once']	= data.callback['once'];			}			data._modal.setup['now']	= (typeof data.callback['now']=="boolean") ? data.callback['now'] : false;			delete data['callback'];		} // END inset callback				// INSET once		data._modal.setup['once']	= (typeof data['once']=="boolean" && typeof data['id']=="string")										? data['once'] : true;		// INSET sync		data._modal.setup['sync']	= (typeof data['sync']=="boolean") ? data['sync'] : true;		return data;	}; /*  END DRIVE */	$.modal_winSetup._modal.animateON	= function () {		// _this = this;		// setTimeout(function () {		// 	PP(_this.css("width"));		// 	PP(_this.css("height"),true);		// }, 1000);		var data = this.data( "modal" );				if ( data.setup.once && !data.setup.isOnce ) {			data.setup.callback.once.call( this );			//data.setup.callback.once.call( this.children( "div[data-type]" ) );			data.setup.isOnce = true;			this.data( "modal", data );		}		data.setup.callback.on.call( this );	};	$.modal_winSetup._modal.animateOFF	= function () {		var data = this.data( "modal" );		data.setup.callback.off.call( this );	};	$.modal_winSetup._shadow.animateON	= function () {this.show();};	$.modal_winSetup._shadow.animateOFF	= function () {this.hide();};	} )( jQuery );